#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

/* FIXED comparator: dereference the pointers to get the integers */
int compare_int(const void *a, const void *b) {
    int ia = *(const int *)a;
    int ib = *(const int *)b;
    if (ia < ib) return -1;
    if (ia > ib) return 1;
    return 0;
}

/*
 * Complete the 'pairs' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER k
 *  2. INTEGER_ARRAY arr
 */
int pairs(int k, int arr_count, int* arr) {
    if (arr_count <= 1) return 0;

    qsort(arr, arr_count, sizeof(int), compare_int);

    long long count = 0;

    if (k == 0) {
        long long run = 1;
        for (int i = 1; i < arr_count; ++i) {
            if (arr[i] == arr[i - 1]) {
                run++;
            } else {
                count += (run * (run - 1)) / 2;
                run = 1;
            }
        }
        count += (run * (run - 1)) / 2;
        return (int)count;
    }

    int left = 0, right = 1;
    while (left < arr_count && right < arr_count) {
        if (left == right) { right++; continue; }
        long long diff = (long long)arr[right] - (long long)arr[left];
        if (diff < k) {
            right++;
        } else if (diff > k) {
            left++;
        } else { // diff == k
            long long cntL = 1, cntR = 1;
            while (left + 1 < arr_count && arr[left + 1] == arr[left]) {
                cntL++;
                left++;
            }
            while (right + 1 < arr_count && arr[right + 1] == arr[right]) {
                cntR++;
                right++;
            }
            count += cntL * cntR;
            left++;
            right++;
        }
    }

    return (int)count;
}

int main()
{
    /* HackerRank uses OUTPUT_PATH; if running locally change this as needed */
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char** first_multiple_input = split_string(rtrim(readline()));

    int n = parse_int(*(first_multiple_input + 0));
    int k = parse_int(*(first_multiple_input + 1));

    char** arr_temp = split_string(rtrim(readline()));

    int* arr = malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        int arr_item = parse_int(*(arr_temp + i));
        *(arr + i) = arr_item;
    }

    int result = pairs(k, n, arr);

    fprintf(fptr, "%d\n", result);

    fclose(fptr);
    free(arr);
    return 0;
}

/* utility functions below (same as before) */

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, (int)(alloc_length - data_length), stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        data = realloc(data, alloc_length);

        if (!data) {
            data = NULL;
            break;
        }
    }

    if (data == NULL) return NULL;

    if (data_length > 0 && data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
        if (!data) data = NULL;
    } else {
        data = realloc(data, data_length + 1);
        if (!data) data = NULL;
        else data[data_length] = '\0';
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) return NULL;
    if (!*str) return str;
    while (*str != '\0' && isspace((unsigned char)*str)) {
        str++;
    }
    return str;
}

char* rtrim(char* str) {
    if (!str) return NULL;
    if (!*str) return str;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace((unsigned char)*end)) {
        end--;
    }
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;
    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        if (!splits) return splits;
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = (int)strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }
    return value;
}
